{"version":3,"sources":["component/todo/Todo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EMPTY_STRING_ARRAY","Todo","React","task","setTask","items","setItems","className","onSubmit","e","preventDefault","htmlFor","type","name","onChange","target","value","map","item","index","key","style","cursor","color","float","onClick","id","tasks","splice","onDelete","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iMAGMA,EAAqC,GAE5B,SAASC,IAAS,IAAD,EACNC,WAJI,IAGE,mBACvBC,EADuB,KACjBC,EADiB,OAEJF,WAAeF,GAFX,mBAEvBK,EAFuB,KAEhBC,EAFgB,KAkC9B,OACE,gBAAC,WAAD,KACI,uBAAKC,UAAU,aACf,uBAAKA,UAAU,eAAf,aAGA,uBAAKA,UAAU,aACX,wBAAMC,SAhCG,SAACC,GACdA,EAAEC,iBACFJ,EAAS,GAAD,mBAAKD,GAAL,CAAYF,KACpBC,EAfsB,MA6Cd,uBAAKG,UAAU,cACX,yBAAOI,QAAQ,WAAf,QACA,yBACIC,KAAK,OACLL,UAAU,+BACVM,KAAK,UACLC,SAlCH,SAACL,GACdL,EAAQK,EAAEM,OAAOC,QAkCDA,MAAOb,KAGf,0BAAQI,UAAU,6BAAlB,UAlCDF,EAAMY,KAAI,SAACC,EAAMC,GACpB,OACI,uBAAKZ,UAAU,YAAYa,IAAKD,GAC5B,uBAAKZ,UAAU,aACX,0BAAKW,EACL,qBACQX,UAAU,eACdc,MAAO,CAACC,OAAO,UAAWC,MAAQ,MAAOC,MAAQ,SACjDC,QAAS,YAtBhB,SAACC,GACd,IAAMC,EAAK,YAAOtB,GAClBsB,EAAMC,OAAOF,EAAI,GACjBpB,EAASqB,GAmB2BE,CAASV,aCnBtCW,MARf,WACE,OACE,yBAAKvB,UAAU,aACb,kBAACN,EAAD,QCKc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f8ed2092.chunk.js","sourcesContent":["import * as React from 'react';\n\nconst EMPTY_STRING : string = '';\nconst EMPTY_STRING_ARRAY : Array<string> = [];\n\nexport default function Todo () {\n    let [task, setTask] = React.useState(EMPTY_STRING);\n    let [items, setItems] = React.useState(EMPTY_STRING_ARRAY);\n\n    const onDelete = (id : number) => {\n        const tasks = [...items];\n        tasks.splice(id, 1);\n        setItems(tasks);\n    };\n    const onSubmit = (e : any) => {\n        e.preventDefault();\n        setItems([...items, task]);\n        setTask(EMPTY_STRING);\n    };\n    const onChange = (e : any) => {\n        setTask(e.target.value);\n    };\n    const renderTodo = () => {\n        return items.map((item, index) => {\n            return (\n                <div className=\"card mb-3\" key={index}>\n                    <div className=\"card-body\">\n                        <h4>{item}\n                        <i \n                                className=\"fas fa-times\"\n                            style={{cursor:'pointer', color : 'red', float : 'right'}}\n                            onClick={() => {onDelete(index)}}\n                        ></i>\n                        </h4>\n                    </div>\n                </div>\n            )\n        });\n    };\n  return (\n    <React.Fragment>\n        <div className='card my-3'>\n        <div className=\"card-header\">\n            Todo List\n        </div>\n        <div className=\"card-body\">\n            <form onSubmit={onSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"element\">Task</label>\n                    <input \n                        type=\"text\"\n                        className='form-control form-control-lg' \n                        name='element'\n                        onChange={onChange}\n                        value={task}\n                    />\n                </div>\n                <button className=\"btn btn-primary btn-block\">Add</button>\n            </form>\n        </div>\n        </div>\n        {renderTodo()}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Todo from './component/todo/Todo';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}