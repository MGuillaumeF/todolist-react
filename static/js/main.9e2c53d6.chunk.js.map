{"version":3,"sources":["utils.ts","components/datetime-picker/DatetimePicker.tsx","components/todo/Todo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EMPTY_STRING_ARRAY","TODO_NAME_VALIDATION_PATTERN","DatetimePicker","props","React","Date","selectedDate","setSelectedDate","getMonth","selectedMonth","setSelectedMonth","getFullYear","selectedYear","setSelectedYear","selectedTime","setSelectedTime","calendarShow","setCalendarShow","onChangeDate","event","target","innerHtml","nDate","setDate","textContent","onChangeMonth","setMonth","value","onChangeYear","setFullYear","onChangeTime","test","trim","id","emptyCelSize","nbDaysPerMonth","date","getDate","tbDays","tbWeeks","startDayOfMonth","getDay","i","push","key","className","undefined","length","slice","name","onChange","map","element","index","type","onClick","displayCalendar","toLocaleDateString","console","log","Todo","useState","task","setTask","items","setItems","getValidationClassName","validClassName","invalidClassName","onSubmit","preventDefault","htmlFor","placeholder","item","style","cursor","color","float","tasks","splice","onDelete","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e2c53d6.chunk.js","sourcesContent":["/**\n * The constant of empty string\n */\nexport const EMPTY_STRING: string = '';\n/**\n * The constant of empty string array\n */\nexport const EMPTY_STRING_ARRAY: Array<string> = [];\n/**\n * The constant of validation pattern of todo item name\n */\nexport const TODO_NAME_VALIDATION_PATTERN: RegExp = /[a-zA-Z].+/;","import * as React from 'react';\nimport './DatetimePicker.css';\n\nexport interface IDatetimePickerProps {\n}\n\nexport default function DatetimePicker(props: IDatetimePickerProps) {\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\n    const [selectedMonth, setSelectedMonth] = React.useState(new Date().getMonth());\n    const [selectedYear, setSelectedYear] = React.useState(new Date().getFullYear());\n    const [selectedTime, setSelectedTime] = React.useState('00:00:00');\n    const [calendarShow, setCalendarShow] = React.useState(false);\n\n    const onChangeDate = (event : any) => {\n        if (event.target.innerHtml !== '') {\n            let nDate = new Date(selectedDate);\n            nDate.setDate(event.target.textContent);\n            setSelectedDate(nDate);\n        }\n    };\n\n    const onChangeMonth = (event : any) => {\n        let nDate = new Date(selectedDate);\n        nDate.setMonth(event.target.value);\n        setSelectedDate(nDate);\n        setSelectedMonth(nDate.getMonth());\n    };\n\n    const onChangeYear = (event : any) => {\n        let nDate = new Date(selectedDate);\n        nDate.setFullYear(event.target.value);\n        setSelectedDate(nDate);\n        setSelectedYear(nDate.getFullYear());\n    };\n\n    const onChangeTime = (event : any) => {\n        if (/^(?:(?:[0-2])|(?:2[0-3])|(?:[0-1][0-9])):(?:(?:[0-5])|(?:[0-5][0-9])):(?:(?:[0-5])|(?:[0-5][0-9]))$/.test(event.target.value.trim())) {\n            setSelectedTime(event.target.value.trim());\n        }\n    };\n\n    const displayCalendar = () => {\n        //const convertDay : Array<string> = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];\n        const convertMonth : Array<string> = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\n        const nbDaysPerMonth : Array<Number> = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const date = selectedDate.getDate();\n\n        const tbDays : any = [];\n        const tbWeeks : any = [];\n\n        const startDayOfMonth = new Date(selectedDate);\n        startDayOfMonth.setDate(1);\n        let emptyCelSize : Number;\n\n        if (startDayOfMonth.getDay() === 0) {\n            emptyCelSize = 6; \n        } else {\n            emptyCelSize = startDayOfMonth.getDay() - 1;\n        }\n\n        if (emptyCelSize) {\n            for (let i = 0; i < emptyCelSize; i += 1) {\n                tbDays.push((<td key={'id_tde_' + i} className='empty'></td>));\n            }\n        }\n\n        for (let i = 0; i < nbDaysPerMonth[selectedMonth]; i += 1) {\n            tbDays.push((<td key={'id_td_' + i}  id={i+1 === date ? 'selected-day' : undefined}>{i + 1}</td>));\n        }\n\n        for (let i = 0; i < tbDays.length / 7; i += 1) {\n            tbWeeks.push((<tr key={'id_tr_' + i} >{tbDays.slice(i * 7, i * 7 + 7)}</tr>));\n        }\n\n\n        return (\n            <div className='container'>\n                <div className=\"row px-3 pt-3\">\n                    <select className='form-control form-control-sm col' name=\"month\" id=\"\" value={selectedMonth}\n                     onChange={onChangeMonth}\n                    >\n                        {convertMonth.map((element, index) => {\n                            return (<option key={'id_opti_' + index} value={index}>{element}</option>)\n                        })}\n                    </select>\n                    <input className='form-control form-control-sm col' type=\"number\" value={selectedYear} onChange={onChangeYear}/>\n                </div>\n                <div className=\"row px-3\">\n                <table className=\"col my-3\">\n                    <thead>\n                        <tr>\n                            <th>L</th>\n                            <th>M</th>\n                            <th>M</th>\n                            <th>J</th>\n                            <th>V</th>\n                            <th>S</th>\n                            <th>D</th>\n                        </tr>\n                    </thead>\n                    <tbody onClick={onChangeDate}>\n                        {tbWeeks.map((element : any) => {\n                            return element\n                        })}\n                    </tbody>\n                </table>\n                </div>\n                <div className=\"row px-3\">\n                <input \n                    className='form-control form-control-sm'\n                    type=\"text\"\n                    value={selectedTime}\n                    onChange={onChangeTime}\n                />\n                </div>\n                <div className=\"row px-3\">\n                <input \n                    className='btn btn-secondary col my-3'\n                    type=\"button\"\n                    value='SAVE'\n                />\n                </div>\n            </div>\n        )\n    };\n    return (\n        <React.Fragment>\n            {calendarShow && <div id='calendar'>\n                {displayCalendar()}\n            </div>}\n            <div className=\"input-group\">\n                <input \n                    type='text' \n                    value={selectedDate.toLocaleDateString() + ' ' + selectedTime}\n                    className='form-control form-control-lg' \n                    onChange={(event :any)=> {console.log(event.target.value)}}          \n                />\n                <div className=\"input-group-append\">\n                <span onClick={() => setCalendarShow(!calendarShow)} className=\"input-group-text clickable\">D</span>\n                </div>\n            </div>\n        </React.Fragment>\n  );\n}\n","import * as React from 'react';\nimport {useState, Fragment} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { EMPTY_STRING, EMPTY_STRING_ARRAY, TODO_NAME_VALIDATION_PATTERN } from '../../utils';\nimport DatetimePicker from '../datetime-picker/DatetimePicker';\n\n/**\n * The component with todo form and todo list\n * @visibleName Todo component\n */\nexport default function Todo() {\n    let [task, setTask] = useState(EMPTY_STRING);\n    let [items, setItems] = useState(EMPTY_STRING_ARRAY);\n\n    /**\n     * Function to update the value of task state \n     * @param even The event of changement\n     */\n    const onChange = (event: any) => {\n        setTask(event.target.value);\n    };\n\n    /**\n     * Function to add an item in todolist\n     * @param event \n     */\n    const onSubmit = (event: any) => {\n        event.preventDefault();\n        if (TODO_NAME_VALIDATION_PATTERN.test(task)) {\n            setItems([...items, task.trim()]);\n            setTask(EMPTY_STRING);\n        }\n    };\n\n    /**\n     * function to delete an item of todolist\n     * @param id The id of item must be deleted\n     */\n    const onDelete = (id: number) => {\n        const tasks = [...items];\n        tasks.splice(id, 1);\n        setItems(tasks);\n    };\n\n    /**\n     * Function to write the task list\n     */\n    const renderTodo = () => {\n        return items.map((item, index) => {\n            return (\n                <div className=\"card mb-3\" key={index}>\n                    <div className=\"card-body\">\n                        <h4>{item}\n                            <i\n                                className=\"fas fa-times\"\n                                style={{ cursor: 'pointer', color: 'red', float: 'right' }}\n                                onClick={() => { onDelete(index) }}\n                            ></i>\n                        </h4>\n                    </div>\n                </div>\n            )\n        });\n    };\n\n    /**\n     * Funtion to select the valid className if input is valid or not\n     * @param validClassName The className if input value is valid\n     * @param invalidClassName The className if input value is invalid\n     */\n    const getValidationClassName = (validClassName: string, invalidClassName: string) => {\n        let resultClassName: string;\n        if (TODO_NAME_VALIDATION_PATTERN.test(task)) {\n            resultClassName = validClassName;\n        } else {\n            resultClassName = invalidClassName;\n        }\n        return resultClassName;\n    }\n\n    return (\n        <Fragment>\n            <div className='card my-3'>\n                <div className=\"card-header\">\n                    Todo List\n                </div>\n                <div className=\"card-body\">\n                    <form onSubmit={onSubmit}>\n                        <div className=\"form-group\">\n                            <label\n                                htmlFor=\"task\"\n                                className={task.length > 0 ? getValidationClassName('text-success', 'text-danger') : ''}\n                            >Task</label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Task to add\"\n                                className={`form-control form-control-lg ${task.length > 0 ? getValidationClassName('is-valid', 'is-invalid') : ''}`}\n                                name='task'\n                                onChange={onChange}\n                                value={task}\n                            />\n                            <label\n                                htmlFor=\"start-date\"\n                                className={task.length > 0 ? getValidationClassName('text-success', 'text-danger') : ''}\n                            >Start Date</label>\n                            <DatetimePicker/>\n                        </div>\n                        <button className=\"btn btn-primary btn-block\">Add</button>\n                    </form>\n                </div>\n            </div>\n            {renderTodo()}\n        </Fragment>\n    );\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport Todo from './components/todo/Todo';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}